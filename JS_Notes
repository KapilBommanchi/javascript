Note-1:

function greet(name) {
	console.log(name);
}

greet('hello'); // No error
greet(); // output will be 'undefined'

// for setting it to default-value

 function greet(name) {
 	name = name || '<your name>';
	console.log(name);
}

greet('xyf'); // o/p- xyf
greet(); // <your name> ; here the undefined keyword is compared with logical OR (||) and gives default string(which was set by us, ex:
	// name = name || '<your name>') not the boolean value


***************************************************************************************************************************************

Note-2:

Computed memeber operator ==>[] // this is used when we are putting key/values intl the object (i.e, infact object is a combination of
	// key-value pairs or nested objects)

The alternative way to [] is '.'

e.g: 
var person = new Object();

person["firstName"] = "Kapil";
person["lastName"] = "B";

var firstNameProperty = "firstName";

console.log(person);
console.log(person[firstNameProperty]);

console.log(person.firstName);
console.log(person.lastName);

person.address = new Object();

person.address.country = "India";
person.address.state = "hyd";

console.log(person.address.country);
console.log(person["address"]["state"]);


*****************************************************************************************************************************************

Note-3:

The alternative way to create an object is 

var obj1 = {}; // this is similar to (var obj1 = new Object();)

*****************************************************************************************************************************************

Note-4:

JavaScript does not have NameSpaces


Note-5:

Json is inspired by JavaScript but it is not similar to JavaScript Object notation. Json is used in quotes for keys.

JSON -- > 
var jsonVar = {
	"firstName": "Kapil",
	"lastName": "B"
};

JavaScript Object -->

var javaScriptObject = {
	firstName: 'Kapil',
	lastName: 'B'
};

*****************************************************************************************************************************************

Note-6:

In JavaScript functions are Objects.
In JavaScript we can attach the properties dynamically.
e.g: 

function greet() {
	console.log('hi hello !!');
}

greet.language('English'); // since functions are Objects in javascript, so we can add properties.

console.log(greet); // returns entire function body with the name and code inside a function
console.log(greet.language); // gives the output 'English'

Anonymous function:

var anonymousFun = function() {
	console.log('hi!!');
}

anonymousFun(); // to invoke a function we call it with the variable name.

****************************************************************************************************************************************

Note-7:

By Value or By Reference:

By Value:

var a = 3; // lets think it is pointing to address location 'ax11'

var b = a; // It will also have an address location but it will have an other copy of the value which 'a' is referencing.(e.g: 'aaff')

By Reference:

var a = {some object}; // lets think its address location is 'ass12'

var b = a; // It will also point to the same address location of 'a' (i.e, 'ass12'), it wont create another copy of it.

****************************************************************************************************************************************

Note-8:

'this' key points to the object int he JavaScript.

console.log(this); // this will point to the global object(i.e, 'window')


Note-9:

'arguments' is a keyword in JavaScript, which will gives us all the arguments/parameters that are passed when invocing a function

e.g:

funcion greet(firstName, lastName, language) {
	
	language = language || 'en'; // making the language parameter a default language as input if there is no value passed while invoking

	console.log(firstName);
	console.log(lastName);
	console.log(language);
	console.log(arguments); // It will give output of whatever parameters which were passed while invoking
}

greet(); // no error unlike other languages; it will give all the variables 'undefined'

greet('Kapil');
greet('Kapil', 'B'); 
greet('Kapil', 'B', 'es');

Note-10:

'spread' is the type of argument only, it is used in dynamic cases.

function greet(firstName, lastName, language, ...other) { // '...other' can take many parameters/arguments 
	// some code
}


Note-11:

Whatever we write inside a '()' is treated as expression.

e.g: (function(name) {
	return 'Hello';
})

to invoke above function

(function(name) {
	return 'Hello' + ' ' + name;
}('Kapil'))    // output 'Hello Kapil'




Note-12:

Closure-->

function greet(message) {
	return function (name) {
		console.log(message + ' ' + name);
	}
}

greet('hello'); // this will return a function boady ( i.e, function (name) { console.log(hello + ' ' + name);} )

greet('hello')('John'); // returns ('hello John') )

var sayHello = greet('hello'); // the javascript first creates a global execution context and when it sees 'greet('hello');',
							  //  It will create a Execution context for 'greet' function and executes and pops out after returning a function.
							  // But 'sayHello' variable has a reference/a-copy of the message(i.e, 'hello'), when we use 'sayHello('John');
							  // It gives output ('hello John')
sayHello('John'); // o/p: 'hello John'  (Note: line-no: 193 and 197 are called as closures)

Closure--> the variable/function/object which holds the reference of outer variables is called closures.


Note-13:

CallBacks:

A function you give to another function, to be run when the other function is is finished.



Note-14:

function currying : Creating a copy of a function but with some preset parameters. (very useful in mathematical situations)
